# ---------------NEW RULES - Space Jam MESSAGES-------------------------#
# --------------Templates for System General Acts-----------------------#
template welcomemsg(variant): "Hello, let's get started!"
template bad(variant): "Sorry, I didn't understand that. Could you please say it again in other words?"
template bad(variant)
    if variant = "1": "I'm Sorry, I couldn't understand that. Could you try rephrasing?"
    if variant = "2": "What do you mean by that?"
    if variant = "3": "Sorry, what? Could you please rephrase that?"
template closingmsg(variant): "Goodbye!"
template closingmsg(condition, user_id, variant):
    if condition = "win": "Thanks for playing, don't forget your user id for the questionnaire is: {user_id}!"
template slowdown(variant): "Could you please slow down a bit? I can't keep track with so much info at once! Please tell me only one thing at a time."
template confirmrestart(variant): "Are you sure you want to restart this module?"

# --------- Helper Functions -------- #

function cap_name(name)
	"{cap_name(name)}"

function decode_position(position)
    if position = "0": "first"
    if position = "1": "second"
    if position = "2": "third"
    if position = "3": "fourth"
    if position = "4": "fifth"
    if position = "last": "last"
    if position = "last_blue": "last blue"
    if position = "first_blue": "first blue"
    if position = "last_green": "first green"
    if position = "second_last": "second to last"

function serialize_list(values)
    "{for(values, "placeholder", ", ", ", ")}"

function placeholder(value)
    "{value}"

function decode_number(number)
    "{number}"
    if number = "0": "no"
    if number = "1": "one"
    if number = "2": "two"
    if number = "3": "three"
    if number = "4": "four"
    if number = "5": "five"
    if number = "6": "six"
    if number = "7": "seven"
    if number = "8": "eight"
    if number = "9": "nine"
    if number = "10": "ten"
    if number = "11": "eleven"
    if number = "12": "twelve"

function describe(module)
    if module = "dials module": "This module is made up of one or more half circle dials, do you see it?"
    if module = "button sequence module": "There should be a single row of 5 buttons somewhere on the dashboard, do you see it?"
    if module = "switches module": "There should be a stack of four switches somewhere on the dashboard, do you see it?"
    if module = "button array module": "This module is a 3 x 4 array of buttons. Do you see it?"
    if module = "slider": "The slider is a vertical bar made of green, yellow, amber, orange, and red sections. There should be a pointer indicating the current slider level. Do you see it?"
    if module = "warp_drive_percent": "The Warp Drive Power is given as a percentage somewhere on the dashboard, do you see it?"

function decode_module(module)
    if module = "dials module": "Dials Module"
    if module = "button sequence module": "Button Sequence Module"
    if module = "switches module": "Switches Module"
    if module = "button array module": "Button Array Module"
    if module = "slider": "Slider"

function info_by_module(slot, value, module)
    if slot = "num_half_dials": "there are {value} half dials"
#    if slot = "num_full_dials": "there are {value} full dials"
    if slot = "left_dial_pointer": "the left dial pointer points to the {value}"
    if slot = "right_dial_pointer": "the right dial pointer points to the {value}"
    if slot = "left_dial_number": "the marked number in the left dial is {value}"
    if slot = "right_dial_number": "the marked number in the right dial is {value}"
    if slot = "active_column": "the active button is in the {decode_position(value)} column"
    if slot = "seq_len": "there are {decode_number(value)} clickable buttons"
    if slot = "slider": "the slider is {value}"
    if slot = "warp_drive_percent": "we have {multiply_by_hundred(value)}% warp drive power left"
    if slot = "color_seq"
        "the color sequence is {serialize_list(value)}"
        if module = "button sequence module": "the order of the clickable buttons is {serialize_list(value)}"
        if module = "switches module": "the order of the switches is {serialize_list(value)}"

function info(slot, value)
    if slot = "num_half_dials": "there are {decode_number(value)} half dials"
    if slot = "slider": "the slider color is {value}"
    if slot = "left_dial_number": "the left dial pointer is pointing to the number {value}"
    if slot = "right_dial_pointer": "the right dial pointer is pointing to the {value}"
    if slot = "seq_len": "there are {decode_number(value)} clickable buttons"
    if slot = "color_seq": "the color sequence is {serialize_list(value)}"
    if slot = "active_column": "the active button was in the {decode_position(value)} column"
    if slot = "current_round": "this is the {decode_position(value)} stage"

#------------------Templates for RequestMore---------------------------#
template reqmore(variant): "I'm sorry, what did I get wrong?"
template reqmore(color_seq, variant): "I'm sorry, I thought that the color sequence is {serialize_list(color_seq)}. Where did I go wrong?"

#------------------Templates for System Requests------------------------#
template request(object, number, count, variant)
    if object = "left_dial"
        if count = "1"
            if variant = "1": "What number is the pointer on the dial pointing to?"
            if variant = "2": "Okay, which number is the dial pointing at?"
            if variant = "3": "The dial should be pointing to a number, which one is it?"            

template request(object, position, variant)
    if object = "column"
        if variant = "1": "Which column is the active button in?"
        if variant = "2": "Can you tell me which column the active button is in?"
        if variant = "3": "Okay, which column is the active button in now?"
    if object = "left_dial"
        if variant = "1": "Which direction is the pointer on the left dial pointing to? (left, right, or middle)?"
        if variant = "2": "Can you tell me where the pointer on the left dial is pointing to? To the left, right or middle?"
        if variant = "3": "Okay, is the left dial pointing to the left, right or middle?"
    if object = "right_dial"
        if variant = "1": "Which direction is the pointer on the right dial pointing to? (left, right, or middle)?"
        if variant = "2": "Can you tell me where the pointer on the right dial is pointing to? To the left, right or middle?"
        if variant = "3": "Okay, is the right dial pointing to the left, right or middle?"

template request(position, object, color, variant)
    if object = "switch"
        if variant = "1": "What color is the {decode_position(position)} switch?"
        if variant = "2": "Okay, what color is the {decode_position(position)} switch?"
        if variant = "3": "What's the color of the {decode_position(position)} switch?"
    if object = "enabled_button"
        if variant = "1":
            "What color is the {decode_position(position)} clickable (colorful border) button?"
            if position = "0": "What color is the first clickable button? Clickable buttons have a blue, amber, or green border."
        if variant = "2"
            "Okay, what color is the {decode_position(position)} clickable (colored border) button?"
            if position = "0": "What is the color of the first clickable (amber, blue, or green border) button?"
        if variant = "3"
            "What's the color of the {decode_position(position)} clickable (color border) button?"
            if position = "0": "What's the color of the first clickable (amber, blue, or green border) button?"

template request(position, object, color, variant, not_grey)
    if object = "enabled_button"
        if variant = "1":
            "If the button is solid grey, that means it's not clickable. What color is the {decode_position(position)} clickable (colorful border) button?"
            if position = "0": "If the button is solid grey, that means it's not clickable. What color is the first clickable button? Clickable buttons have a blue, amber, or green border."
        if variant = "2"
            "Ah, a solid grey color shows that the button is not clickable. What color is the {decode_position(position)} clickable (colored border) button?"
            if position = "0": "Ah, a solid grey color shows that the button is not clickable. What is the color of the first clickable (amber, blue, or green border) button?"
        if variant = "3"
            "Okay, a solid grey color means that the button is not clickable, what's the color of the {decode_position(position)} clickable (color border) button?"
            if position = "0": "Okay, a solid grey color means that the button is not clickable, what's the color of the first clickable (amber, blue, or green border) button?"

template request(object, number, describe, variant)
    if object = "half_dial"
        if variant = "1": "There should really be either one or two half dials. How many do you see?"
        if variant = "2": "Ah. There can only be one or two dials. How many are on the control panel?"
        if variant = "3": "I don't think that's right, there can only be one or two half circle dials. How many are there?"
    if object = "enabled_button"
        if variant = "1": "There can be at most 5 clickable (colored border) buttons. How many clickable (color border) buttons are there?"
        if variant = "2": "Ah, there should be at most 5 clickable (colored border) buttons. How many clickable (color border) buttons do you see?"
        if variant = "3": "Okay, at most there should be 5 clickable (colored border) buttons, how many clickable (color border) buttons are there?"

template request(object, number, variant)
    if object = "half_dial"
        if variant = "1": "How many half dials are there? There should be either one or two."
        if variant = "2": "How many dials are there on the control panel? There might be one or two of them."
        if variant = "3": "How many half circle dials are there on the dashboard? There could be one or two."
    if object = "full_dial"
        if variant = "1": "How many full circle dials are there?"
        if variant = "2": "How many dials are full circles?"
        if variant = "3": "How many full circle dials are there on the dashboard?"
    if object = "left_dial"
        if variant = "1": "What number is the pointer on the left dial pointing to?"
        if variant = "2": "Okay, which number is the left dial pointing at?"
        if variant = "3": "The left dial should be pointing to a number, which one is it?"
    if object = "right_dial"
        if variant = "1": "What number is the pointer on the right dial pointing to?"
        if variant = "2":"What is the number the right dial is pointing to?"
        if variant = "3": "What's the number of the right dial?"


template request(object, color, variant)
    if object = "slider"
        if variant = "1": "What color is the slider?"
        if variant = "2": "What is the slider color right now?"
        if variant = "3": "What's the color of the slider?"

template request(restart, variant)
    if variant = "1": "I'm sorry, I can't remember either, maybe try something random and let me know if it works."
    if variant = "2": "Sorry, I don't know either. Just try something and tell me if it works."
    if variant = "3": "I don't remember which button it was, I'm sorry. How about you just try something and tell me if it works?"



#-------------Templates for System Inform---------------#

template inform(object, action, variant)
    if object = "dials"
        if action = "point_middle"
            if variant = "1": "Therefore, you should move both pointers to the middle position."
            if variant = "2": "This means you should set the pointers of both dials to the middle position."
            if variant = "3": "So you should set both pointers to the middle position."
        if action = "largest_odd"
            if variant = "1": "Therefore, you should move the pointers to the largest odd number on each dial."
            if variant = "2": "This means you should set each pointer to the largest odd number."
            if variant = "3": "So you should set both pointers to the largest odd number on each dial."
        if action = "one_left_one_right"
            if variant = "1": "Therefore, move the pointer on the left dial one position to the right, and move the pointer on the right dial one position to the left."
            if variant = "2": "This means you should set the left dial pointer one position to the right, and the right dial pointer one position to the left."
            if variant = "3": "You should then move the left dial pointer one position to the right, and the right dial pointer one position to the left."
        if action = "far_left_far_right"
            if variant = "1": "Therefore, set the pointer of the left dial to the far left, and the pointer of the right dial to the far right position."
            if variant = "2": "This means you should set the pointer of the left dial to the far left position, and the pointer of the right dials to the far right one."
            if variant = "3": "You should then set the pointer of the left dial to the far left, and the pointer of the right dial to the far right position."
        if action = "point_left"
            if variant = "1": "Therefore, you should move the pointer to the far left position."
            if variant = "2": "This means you should set the pointer to the far left position."
            if variant = "3": "So you should set the pointer to the far left position."
        if action = "greater_ten"
            if variant = "1": "Therefore, you should move the pointer to the smallest number which is greater than ten."
            if variant = "2": "This means you should set the pointer to the smallest number that is larger than ten."
            if variant = "3": "So you should set the pointer to the smallest number which is more than ten."
        if action = "smallest_odd"
            if variant = "1": "Therefore, you should move the pointer to smallest odd number."
            if variant = "2": "This means you should set the pointer to the smallest odd number."
            if variant = "3": "So you should set the pointer to the smallest odd number."
        if action = "point_right"
            if variant = "1": "Therefore, you should move the pointer to the far right position."
            if variant = "2": "This means you should set the pointer to the far right position."
            if variant = "3": "So you should set the pointer to the far right position."
    if object = "column"
        if action = "button_round_1"
            if variant = "1": "Therefore, push the same button you did in the first round."
            if variant = "2": "This means you should activate the same button now that you did in the round one."
            if variant = "3": "So you should activate the same button as you did in the first round."
        if action = "button_round_2"
            if variant = "1": "Therefore, activate the same button that you did in the second round."
            if variant = "2": "This means you should now push the same button that you did in round two."
            if variant = "3": "So you should activate the same button as you did in the second round."
        if action = "button_round_3"
            if variant = "1": "Therefore, push the same button that you did in the third round."
            if variant = "2": "This means you should push the same button now that did in round three."
            if variant = "3": "So you should activate the same button as you did in the third round."
        if action = "color_round_2"
            if variant = "1": "Therefore, press the first button in the second column with the same color as the button you activated in the second round."
            if variant = "2": "This means you should push the first button in the second column that has the same color as the button you pushed in the second round."
            if variant = "3": "So you should  activate the first button in the second column with the same color as the button you activated in the second round."


template inform(object, position, variant)
    if object = "enabled_button"
        if variant = "1": "Therefore, activate the {decode_position(position)} button."
        if variant = "2": "This means you should push the {decode_position(position)} button."
        if variant = "3": "So you should activate the {decode_position(position)} button."

template inform(object, position, action, variant)
    if object = "switch"
        if variant = "1": "Therefore, for the {decode_position(position)} one, activate the {action} side of this switch."
        if variant = "2": "This means, for the {decode_position(position)} switch, you should push the {action} side."
        if variant = "3": "So, for the {decode_position(position)} switch, you should activate its {action} side."
    if object = "column"
        if action = "first_button_same_color"
            if variant = "1": "Therefore, activate the first button which has the same color as the active button and is in the {decode_position(position)} column."
            if variant = "2": "This means you should push the first button that is the same color as the active one and in the {decode_position(position)} column."
            if variant = "3": "So you should activate the first button which has the same color as the active button and is in the {decode_position(position)} column."
        if action = "last_button_same_color"
            if variant = "1": "Therefore, activate the last button which has the same color as the active button and is in the {decode_position(position)} column."
            if variant = "2": "This means you should push the last button that is the same color as the active one and in the {decode_position(position)} column."
            if variant = "3": "So you should activate the last button which has the same color as the active button and is in the {decode_position(position)} column."
        if action = "second_button"
            if variant = "1": "Therefore, activate the second button in the {decode_position(position)} column."
            if variant = "2": "This means you should push the second button in the {decode_position(position)} column."
            if variant = "3": "So you should activate the second button in the {decode_position(position)} column."
        if action = "color_round_2"
            if variant = "1": "Therefore, press the first button in the second column with the same color as the button you activated in the second round."
            if variant = "2": "This means you should push the first button in the second column that has the same color as the button you pushed in the second round."
            if variant = "3": "So you should activate the first button in the second column with the same color as the button you activated in the second round."


#-------------Templates for System Describe---------------#
template describe(color, verbose, variant)
    if variant = "1": "Colors for Buttons and Switches are: Blue, Green, or Amber. Colors for the slider, from top to bottom, are: Green, Yellow, Amber, Orange, Red"
    if variant = "2": "The buttons and switches can come in blue, green and amber. The colors of the slider are, in order: green, yellow, amber, orange and red."
    if variant = "3": "Buttons and switches are either blue, green or amber. The slider starts with green at the top, then yellow, amber, orange, and finally red at the bottom."


template describe(object, verbose, variant)
    if object = "slider"
        if variant = "1": "The Slider is a vertical bar with five sections of different size and color. The color sequence from top to bottom is green, yellow, amber, orange, and red. A triangular pointer should be sitting in one of the sections. This indicates your current slider level (which is one of the five colors). Do you see it?"
        if variant = "2": "Ok, so the slider is a vertical bar in five different colors. It starts with green at the top, the next colors are yellow, amber, and orange, and finally red. There should as be some kind of pointer that indicates the slider level. Can you see it?"
        if variant = "3": "The slider should be a vertical bar with five sections in different colors and a pointer. The colors, from top to bottom, should be green, yellow, amber, orange, and red. There should be a pointer at one of these colors showing our current slider level. Do you see it?"
    if object = "pointer"
        if variant = "1": "The pointer is found in the middle of a dial and must be set to a specific position to complete the module. Do you see it?"
        if variant = "2": "Ok, so the pointer is an indicator at the middle of a dial, to complete the module, you'll have to set it to the correct position. Do you see it?"
        if variant = "3": "The pointer is found in the middle of a dial to complete the module, you'll have to set it to a specific position. Do you see it?"
    if object = "warp_drive"
        if variant = "1": "The Warp Drive Power is shown in a horizontal display. The power is given as a percentage and displayed by how much of the indicator is filled blue. Do you see it?"
        if variant = "2": "Ok, so there should be a horizontal bar somewhere with a blue border. Inside the bar, there is a percentage given. That is the warp drive power. Can you see it?"
        if variant = "3": "The warp drive power is a percentage somewhere on the dashboard. It is inside a horizontal indicator with a blue border. Do you see it?"


template describe(module, verbose, variant)
    if verbose = "True"
        if module = "dials module"
            if variant = "1": "The Dials Module is made of one or more half dials which can be spread out across the dashboard. Each dial consists of several numbered panels and an indicator that points to one of the numbers. Do you see it?"
            if variant = "2": "Ok, so the dials module consists of on or more half-cirlce dials. The dials aren't necessarily next to each other. Each dial consists of five sections each labeled with a number. And on each dial, there is an indicator pointer that points to one of the sections. Can you see it?"
            if variant = "3": "The dials module should consist of one or more half circles dials with numbered panels. In the middle of each dial, there should be some kind of pointer, directed at one of the numbered panels. Do you see it?"
        if module = "button sequence module"
            if variant = "1": "The Button Sequence Module is made of five round buttons in a single row. Each button has a border either in color or in light grey. The ones with a colored border are clickable and the buttons with a light grey border are disabled. All of them should have a grey fill color. Do you see it?"
            if variant = "2": "Ok, so the button sequence module consists of a single row of five round buttons in different colors. Some buttons may have a light grey border: those are disabled. The other buttons are grey in the middle but have a colorful border: those are clickable. Can you see it?"
            if variant = "3": "The button sequence module should be a single row of five buttons, all have a grey fill color but a different color for their border. If the border is light grey, the button is disabled, otherwise it is clickable. Do you see it?"
        if module = "switches module"
            if variant = "1": "The Switches Module is made of four vertically stacked switches. Each switch should have a left and a right side. Do you see it?"
            if variant = "2": "Ok, so the switches module consists of four switches in a vertical column. The switches are split in two, so they have a left side and a right side. Can you see it?"
            if variant = "3": "The switches module should consist of four switches that are stacked vertically in a column. Each should have a left side and a ride side. Do you see it?"
        if module = "button array module"
            if variant = "1": "The Button Array Module is made of four rows and three columns of round buttons. Each button should have a colored border and all but one button should have a grey fill color. The button with a fill color matching its border is the active button. Do you see it?"
            if variant = "2": "Ok, so the button array module should be a 3 x 4 array of round buttons. So that's three columns and four rows. Most of the buttons are grey with a colorful border but there should be one button that is filled with the same color as its border. That button is the active button. Can you see it?"
            if variant = "3": "The button array module should consist of 12 buttons, structured in rows and columns. One button should be filled in (this is the active button) and all the other ones should be grey in the middle but have a colored border. Do you see it?"

template describe(variant, *slots)
    if variant = "1": "I'm Sorry, I couldn't understand that. Could you try rephrasing?"
    if variant = "2": "What do you mean by that?"
    if variant = "3": "Sorry, what? Could you please rephrase that?"

#-------------Templates for System Explain---------------#
# Dials Module
template explain(num_half_dials, explanation, variant)
    if num_half_dials = "2"
        if explanation = "green_slider"
            if variant = "1": "Okay, based on what you've said there should be two half-circle dials and the slider should point to green. "
            if variant = "2": "Alright, so there should be two half-circle dials and the slider level should be green. "
            if variant = "3": "If I have this correct, there are two half-circle dials and the slider is set to green. "
        if explanation = "left_dial_even"
            if variant = "1": "Okay, based on what you've said there should be two half-circle dials, the slider should not be set to green, and the left dial should be pointed to an even number. "
            if variant = "2": "Alright, so there should be two half-circle dials, a slider that is not green, and a left dial pointing to an even number. "
            if variant = "3": "If I understand correctly, there are two half-circle dials and the slider is not green, but the left dial points to an even number. "
        if explanation = "right_dial_right"
            if variant = "1": "Okay, based on what you've said there should be two half-circle dials, the slider is not green, the left dial is pointed to an odd number and the right dial is pointed to the right. "
            if variant = "2": "Alright, so there are two half-circle dials, the slider isn't green, the left dial is pointing to an odd number, and the right dial is pointing to the right side. "
            if variant = "3": "If I have this correct, there are two half-circle dials, the slider is not green, the left dial points to an odd number, and the right dial points to the right. "
        if explanation = "right_dial_not_right"
            if variant = "1": "Okay, based on what you've said there should be two half-circle dials, the slider level should not be green, the left dial should point to an odd number and the right dial isn't pointed to the right. "
            if variant = "2": "Alright, so there should be two half-circle dials, the slider is not green, the left dial pointing to an odd number, and the right one does not point to the right side. "
            if variant = "3": "So there are two half-circle dials, the slider is not green, the left dial points to an odd number and the right dial doesn't point to the right. "
    if num_half_dials = "1":
        if explanation = "green_slider"
            if variant = "1": "Okay, based on what you've said there should be one half-circle dial and the slider should point to green. "
            if variant = "2": "Alright, so there should be one dial and the slider level should be green. "
            if variant = "3": "If I have this correct, there is one half-circle dial and the slider is set to green. "
        if explanation = "less_ten"
            if variant = "1": "Okay, based on what you've said, there should be one half-circle dial, which is pointing to a number less than 10. And the slider should not point to green. "    
            if variant = "2": "Alright, so there should be one dial, pointing to a number less than ten, and the slider level should not be green. "
            if variant = "3": "If I have this correct, there is one half-circle dial, it is pointing to a number less than ten, and the slider is set to green. "
        if explanation = "even"
            if variant = "1": "Okay, based on what you've said there should be one half-circle dial, the slider should not be set to green, and the dial should be pointed to an even number. "
            if variant = "2": "Alright, so there should be one half-circle dial, a slider that isn't green, and dial should be pointing to an even number. "
            if variant = "3": "If I understand correctly, there is one half-circle dial, pointing to an even number and the slider is not green. "
        if explanation = "default"
            if variant = "1": "Okay, based on what you've said there should be one half-circle dial, the slider should not be set to green, and the dial should not be pointed to an even number. "
            if variant = "2": "Alright, so there should be one half-circle dial, a slider that isn't green, and dial should not be pointing to an even number. "
            if variant = "3": "If I understand correctly, there is one half-circle dial, which is not pointing to an even number and the slider is not green. "

# Button Sequence Module
template explain(color_seq, num_enabled, explanation, variant)
    if variant = "1": "Okay, based on what you've said, the complete sequence of clickable (colorful border) buttons should be: {serialize_list(color_seq)}. "
    if variant = "2": "Alright, so the whole clickable button sequence should be {serialize_list(color_seq)}. "
    if variant = "3": "If I understand correctly, this is the sequence of clickable buttons: {serialize_list(color_seq)}.  "

# Switch Module
template explain(color_seq, slider, position, explanation, variant)
    if variant = "1"
        "Okay, the switch sequence so far should be: {serialize_list(color_seq)}, and the slider should not be set to green. "
        if slider = "green"
            "Okay, the switch sequence so far should be: {serialize_list(color_seq)}, and the slider should be set to {slider}. "
    if variant = "2"
        "Alright, the slider should not point to green and the switch sequence so far should be {serialize_list(color_seq)}. "
        if slider = "green"
            "Alright, the slider should point to {slider} and the switch sequence so far should be {serialize_list(color_seq)}. "
    if variant = "3"
        "If I have this right, the slider is not green and the switch sequence so far is: {serialize_list(color_seq)}. "
        if slider = "green"
            "If I have this right, the slider is {slider} and the switch sequence so far is: {serialize_list(color_seq)}. "

template explain(color_seq, position, explanation, variant)
    if variant = "1"
        "Okay, the switch sequence so far should be: {serialize_list(color_seq)}. "
    if variant = "2"
        "Alright, the switches so far should be in the following order: {serialize_list(color_seq)}. "
    if variant = "3"
        "If I have this right, the switch sequence so far is: {serialize_list(color_seq)}. "

# Button Array Module
template explain(active_column, current_round, variant)
    if variant = "1": "Okay, we're in the {decode_position(current_round)} round, and the active button should be in the {decode_position(active_column)} column. "
    if variant = "2": "Alright, this should be the {decode_position(current_round)} stage and the active button is in the {decode_position(active_column)} column. "
    if variant = "3": "So, it's now the {decode_position(current_round)} round and you said the active button is in the {decode_position(active_column)} column. "



#-------------Templates for System NextModule---------------#
template nextmodule(first, module, variant)
    if first = "True": " The first module is the {decode_module(module)}. {describe(module)}"
    if first = "False"
        if variant = "1": "Okay, let's move on to the the next module: the {decode_module(module)}. {describe(module)}"
        if variant = "2": "So, the next module is the {decode_module(module)}. {describe(module)}"
        if variant = "3": "Our next module is the {decode_module(module)}. {describe(module)}"

#------------System Confirms--------------#
template confirmaction(variant): 
    if variant = "1": "Did it work?"
    if variant = "2": "Did it work?"
    if variant = "3": "Did that work?"


# seq_complete, current_switch_ind, and current_round might be given as parameters but they should not given to the user
# check therefore first if one of the parameters is given to explicitly exclude it
# if the name of the module is given, use it to disambiguate beliefs
template confirm(seq_complete, module, variant, *beliefs): "Are you sure that {for_entry(beliefs, "info_by_module", ", ", ", and ", module)}?"
template confirm(seq_complete, variant, *beliefs): "Are you sure that {for_entry(beliefs, "info", ", ", ", and ")}?"
template confirm(current_switch_ind, module, variant, *beliefs): "Are you sure that {for_entry(beliefs, "info_by_module", ", ", ", and ", module)}?"
template confirm(current_switch_ind, variant, *beliefs): "Are you sure that {for_entry(beliefs, "info", ", ", ", and ")}?"
template confirm(current_round, variant): "I'm sorry, let's start over and see if we can figure out where we went wrong."
template confirm(current_round, module, variant, *beliefs): "Are you sure that {for_entry(beliefs, "info_by_module", ", ", ", and ", module)}?"
template confirm(current_round, variant, *beliefs): "Are you sure that {for_entry(beliefs, "info", ", ", ", and ")}?"

# if seq_complete, current_switch_ind, and current_round are not given, list all slots
template confirm(module, variant, *beliefs): "Are you sure that {for_entry(beliefs, "info_by_module", ", ", ", and ", module)}?"
template confirm(variant, *beliefs): "Are you sure that {for_entry(beliefs, "info", ", ", ", and ")}?"